/* tslint:disable */
/* eslint-disable */
/**
 * El Aggregate BFF
 * Бэкенд для федеративного приложения
 *
 * The version of the OpenAPI document: 0.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
    Component,
    ComponentsControllerFindAll200Response,
    ConflictResourceException,
    CreateComponentResponseDto,
    DetailedBadRequestException,
    DetailedNotFoundException,
    UpdateComponentDto,
} from '../models/index'
import {
    ComponentFromJSON,
    ComponentToJSON,
    ComponentsControllerFindAll200ResponseFromJSON,
    ComponentsControllerFindAll200ResponseToJSON,
    ConflictResourceExceptionFromJSON,
    ConflictResourceExceptionToJSON,
    CreateComponentResponseDtoFromJSON,
    CreateComponentResponseDtoToJSON,
    DetailedBadRequestExceptionFromJSON,
    DetailedBadRequestExceptionToJSON,
    DetailedNotFoundExceptionFromJSON,
    DetailedNotFoundExceptionToJSON,
    UpdateComponentDtoFromJSON,
    UpdateComponentDtoToJSON,
} from '../models/index'

export interface ComponentsControllerCreateRequest {
    name: string
    description: string
    file?: Blob
}

export interface ComponentsControllerFindAllRequest {
    order?: ComponentsControllerFindAllOrderEnum
    page?: number
    take?: number
    populateAll?: boolean
    populateItems?: string
    withDeleted?: boolean
    minimalFields?: boolean
}

export interface ComponentsControllerFindOneRequest {
    id: string
    populateAll?: boolean
    populateItems?: string
    minimalFields?: boolean
}

export interface ComponentsControllerRemoveRequest {
    id: string
}

export interface ComponentsControllerUpdateRequest {
    id: string
    updateComponentDto: UpdateComponentDto
}

/**
 *
 */
export class ComponentsApi extends runtime.BaseAPI {
    /**
     * Create new component
     */
    async componentsControllerCreateRaw(
        requestParameters: ComponentsControllerCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CreateComponentResponseDto>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling componentsControllerCreate().',
            )
        }

        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling componentsControllerCreate().',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }]
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes)

        let formParams: { append(param: string, value: any): any }
        let useForm = false
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm
        if (useForm) {
            formParams = new FormData()
        } else {
            formParams = new URLSearchParams()
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any)
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any)
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any)
        }

        const response = await this.request(
            {
                path: `/api/components`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateComponentResponseDtoFromJSON(jsonValue))
    }

    /**
     * Create new component
     */
    async componentsControllerCreate(
        requestParameters: ComponentsControllerCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CreateComponentResponseDto> {
        const response = await this.componentsControllerCreateRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get all components
     */
    async componentsControllerFindAllRaw(
        requestParameters: ComponentsControllerFindAllRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ComponentsControllerFindAll200Response>> {
        const queryParameters: any = {}

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order']
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page']
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take']
        }

        if (requestParameters['populateAll'] != null) {
            queryParameters['populateAll'] = requestParameters['populateAll']
        }

        if (requestParameters['populateItems'] != null) {
            queryParameters['populateItems'] = requestParameters['populateItems']
        }

        if (requestParameters['withDeleted'] != null) {
            queryParameters['withDeleted'] = requestParameters['withDeleted']
        }

        if (requestParameters['minimalFields'] != null) {
            queryParameters['minimalFields'] = requestParameters['minimalFields']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/components`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ComponentsControllerFindAll200ResponseFromJSON(jsonValue),
        )
    }

    /**
     * Get all components
     */
    async componentsControllerFindAll(
        requestParameters: ComponentsControllerFindAllRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ComponentsControllerFindAll200Response> {
        const response = await this.componentsControllerFindAllRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get single component
     */
    async componentsControllerFindOneRaw(
        requestParameters: ComponentsControllerFindOneRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Component>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling componentsControllerFindOne().',
            )
        }

        const queryParameters: any = {}

        if (requestParameters['populateAll'] != null) {
            queryParameters['populateAll'] = requestParameters['populateAll']
        }

        if (requestParameters['populateItems'] != null) {
            queryParameters['populateItems'] = requestParameters['populateItems']
        }

        if (requestParameters['minimalFields'] != null) {
            queryParameters['minimalFields'] = requestParameters['minimalFields']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/components/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => ComponentFromJSON(jsonValue))
    }

    /**
     * Get single component
     */
    async componentsControllerFindOne(
        requestParameters: ComponentsControllerFindOneRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Component> {
        const response = await this.componentsControllerFindOneRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Delete single component
     */
    async componentsControllerRemoveRaw(
        requestParameters: ComponentsControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Component>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling componentsControllerRemove().',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/components/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => ComponentFromJSON(jsonValue))
    }

    /**
     * Delete single component
     */
    async componentsControllerRemove(
        requestParameters: ComponentsControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Component> {
        const response = await this.componentsControllerRemoveRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Update single component
     */
    async componentsControllerUpdateRaw(
        requestParameters: ComponentsControllerUpdateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Component>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling componentsControllerUpdate().',
            )
        }

        if (requestParameters['updateComponentDto'] == null) {
            throw new runtime.RequiredError(
                'updateComponentDto',
                'Required parameter "updateComponentDto" was null or undefined when calling componentsControllerUpdate().',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        headerParameters['Content-Type'] = 'application/json'

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/components/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateComponentDtoToJSON(requestParameters['updateComponentDto']),
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => ComponentFromJSON(jsonValue))
    }

    /**
     * Update single component
     */
    async componentsControllerUpdate(
        requestParameters: ComponentsControllerUpdateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Component> {
        const response = await this.componentsControllerUpdateRaw(requestParameters, initOverrides)
        return await response.value()
    }
}

/**
 * @export
 */
export const ComponentsControllerFindAllOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC',
} as const
export type ComponentsControllerFindAllOrderEnum =
    (typeof ComponentsControllerFindAllOrderEnum)[keyof typeof ComponentsControllerFindAllOrderEnum]
