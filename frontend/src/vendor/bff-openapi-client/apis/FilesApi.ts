/* tslint:disable */
/* eslint-disable */
/**
 * El Aggregate BFF
 * Бэкенд для федеративного приложения
 *
 * The version of the OpenAPI document: 0.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
    DetailedBadRequestException,
    DetailedNotFoundException,
    FilesControllerGetFilesList200Response,
    UploadFileResponseDto,
} from '../models/index'
import {
    DetailedBadRequestExceptionFromJSON,
    DetailedBadRequestExceptionToJSON,
    DetailedNotFoundExceptionFromJSON,
    DetailedNotFoundExceptionToJSON,
    FilesControllerGetFilesList200ResponseFromJSON,
    FilesControllerGetFilesList200ResponseToJSON,
    UploadFileResponseDtoFromJSON,
    UploadFileResponseDtoToJSON,
} from '../models/index'

export interface FilesControllerDeleteFileRequest {
    fileName: string
}

export interface FilesControllerGetFileRequest {
    fileName: string
}

export interface FilesControllerGetFilesListRequest {
    order?: FilesControllerGetFilesListOrderEnum
    page?: number
    take?: number
    populateAll?: boolean
    populateItems?: string
    withDeleted?: boolean
    minimalFields?: boolean
}

export interface FilesControllerUploadFileRequest {
    componentId: number
    file: Blob
}

/**
 *
 */
export class FilesApi extends runtime.BaseAPI {
    /**
     * Delete single file
     */
    async filesControllerDeleteFileRaw(
        requestParameters: FilesControllerDeleteFileRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fileName'] == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling filesControllerDeleteFile().',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/files/{fileName}`.replace(
                    `{${'fileName'}}`,
                    encodeURIComponent(String(requestParameters['fileName'])),
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response)
        } else {
            return new runtime.TextApiResponse(response) as any
        }
    }

    /**
     * Delete single file
     */
    async filesControllerDeleteFile(
        requestParameters: FilesControllerDeleteFileRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<any> {
        const response = await this.filesControllerDeleteFileRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get single file from S3
     */
    async filesControllerGetFileRaw(
        requestParameters: FilesControllerGetFileRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['fileName'] == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling filesControllerGetFile().',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/files/{fileName}`.replace(
                    `{${'fileName'}}`,
                    encodeURIComponent(String(requestParameters['fileName'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.BlobApiResponse(response)
    }

    /**
     * Get single file from S3
     */
    async filesControllerGetFile(
        requestParameters: FilesControllerGetFileRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Blob> {
        const response = await this.filesControllerGetFileRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get all files from DB
     */
    async filesControllerGetFilesListRaw(
        requestParameters: FilesControllerGetFilesListRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<FilesControllerGetFilesList200Response>> {
        const queryParameters: any = {}

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order']
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page']
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take']
        }

        if (requestParameters['populateAll'] != null) {
            queryParameters['populateAll'] = requestParameters['populateAll']
        }

        if (requestParameters['populateItems'] != null) {
            queryParameters['populateItems'] = requestParameters['populateItems']
        }

        if (requestParameters['withDeleted'] != null) {
            queryParameters['withDeleted'] = requestParameters['withDeleted']
        }

        if (requestParameters['minimalFields'] != null) {
            queryParameters['minimalFields'] = requestParameters['minimalFields']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/files`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            FilesControllerGetFilesList200ResponseFromJSON(jsonValue),
        )
    }

    /**
     * Get all files from DB
     */
    async filesControllerGetFilesList(
        requestParameters: FilesControllerGetFilesListRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<FilesControllerGetFilesList200Response> {
        const response = await this.filesControllerGetFilesListRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Upload single file
     */
    async filesControllerUploadFileRaw(
        requestParameters: FilesControllerUploadFileRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<UploadFileResponseDto>> {
        if (requestParameters['componentId'] == null) {
            throw new runtime.RequiredError(
                'componentId',
                'Required parameter "componentId" was null or undefined when calling filesControllerUploadFile().',
            )
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling filesControllerUploadFile().',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }]
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes)

        let formParams: { append(param: string, value: any): any }
        let useForm = false
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm
        if (useForm) {
            formParams = new FormData()
        } else {
            formParams = new URLSearchParams()
        }

        if (requestParameters['componentId'] != null) {
            formParams.append('componentId', requestParameters['componentId'] as any)
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any)
        }

        const response = await this.request(
            {
                path: `/api/files`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadFileResponseDtoFromJSON(jsonValue))
    }

    /**
     * Upload single file
     */
    async filesControllerUploadFile(
        requestParameters: FilesControllerUploadFileRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<UploadFileResponseDto> {
        const response = await this.filesControllerUploadFileRaw(requestParameters, initOverrides)
        return await response.value()
    }
}

/**
 * @export
 */
export const FilesControllerGetFilesListOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC',
} as const
export type FilesControllerGetFilesListOrderEnum =
    (typeof FilesControllerGetFilesListOrderEnum)[keyof typeof FilesControllerGetFilesListOrderEnum]
