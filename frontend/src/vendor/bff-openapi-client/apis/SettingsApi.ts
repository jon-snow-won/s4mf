/* tslint:disable */
/* eslint-disable */
/**
 * El Aggregate BFF
 * Бэкенд для федеративного приложения
 *
 * The version of the OpenAPI document: 0.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
    CreateSettingDto,
    DetailedBadRequestException,
    DetailedNotFoundException,
    ServicesControllerFindAll200Response,
    Setting,
    SettingsControllerFindAll200Response,
    UpdateSettingDto,
} from '../models/index'
import {
    CreateSettingDtoFromJSON,
    CreateSettingDtoToJSON,
    DetailedBadRequestExceptionFromJSON,
    DetailedBadRequestExceptionToJSON,
    DetailedNotFoundExceptionFromJSON,
    DetailedNotFoundExceptionToJSON,
    ServicesControllerFindAll200ResponseFromJSON,
    ServicesControllerFindAll200ResponseToJSON,
    SettingFromJSON,
    SettingToJSON,
    SettingsControllerFindAll200ResponseFromJSON,
    SettingsControllerFindAll200ResponseToJSON,
    UpdateSettingDtoFromJSON,
    UpdateSettingDtoToJSON,
} from '../models/index'

export interface SettingsControllerCreateRequest {
    createSettingDto: CreateSettingDto
}

export interface SettingsControllerFindAllRequest {
    order?: SettingsControllerFindAllOrderEnum
    page?: number
    take?: number
    populateAll?: boolean
    populateItems?: string
    withDeleted?: boolean
    minimalFields?: boolean
}

export interface SettingsControllerFindOneRequest {
    id: string
    populateAll?: boolean
    populateItems?: string
    minimalFields?: boolean
}

export interface SettingsControllerFindRevisionsRequest {
    id: string
    order?: SettingsControllerFindRevisionsOrderEnum
    page?: number
    take?: number
    populateAll?: boolean
    populateItems?: string
    withDeleted?: boolean
    minimalFields?: boolean
}

export interface SettingsControllerGetRevisionRequest {
    id: string
    revision: string
    populateAll?: boolean
    populateItems?: string
    minimalFields?: boolean
}

export interface SettingsControllerRemoveRequest {
    id: string
    isHardDelete: boolean
}

export interface SettingsControllerRestoreRequest {
    id: string
}

export interface SettingsControllerUpdateRequest {
    id: string
    toReplace: boolean
    updateSettingDto: UpdateSettingDto
}

/**
 *
 */
export class SettingsApi extends runtime.BaseAPI {
    /**
     * Create setting
     */
    async settingsControllerCreateRaw(
        requestParameters: SettingsControllerCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Setting>> {
        if (requestParameters['createSettingDto'] == null) {
            throw new runtime.RequiredError(
                'createSettingDto',
                'Required parameter "createSettingDto" was null or undefined when calling settingsControllerCreate().',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        headerParameters['Content-Type'] = 'application/json'

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/settings`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateSettingDtoToJSON(requestParameters['createSettingDto']),
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingFromJSON(jsonValue))
    }

    /**
     * Create setting
     */
    async settingsControllerCreate(
        requestParameters: SettingsControllerCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Setting> {
        const response = await this.settingsControllerCreateRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get all settings
     */
    async settingsControllerFindAllRaw(
        requestParameters: SettingsControllerFindAllRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SettingsControllerFindAll200Response>> {
        const queryParameters: any = {}

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order']
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page']
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take']
        }

        if (requestParameters['populateAll'] != null) {
            queryParameters['populateAll'] = requestParameters['populateAll']
        }

        if (requestParameters['populateItems'] != null) {
            queryParameters['populateItems'] = requestParameters['populateItems']
        }

        if (requestParameters['withDeleted'] != null) {
            queryParameters['withDeleted'] = requestParameters['withDeleted']
        }

        if (requestParameters['minimalFields'] != null) {
            queryParameters['minimalFields'] = requestParameters['minimalFields']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/settings`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            SettingsControllerFindAll200ResponseFromJSON(jsonValue),
        )
    }

    /**
     * Get all settings
     */
    async settingsControllerFindAll(
        requestParameters: SettingsControllerFindAllRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SettingsControllerFindAll200Response> {
        const response = await this.settingsControllerFindAllRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get one setting
     */
    async settingsControllerFindOneRaw(
        requestParameters: SettingsControllerFindOneRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Setting>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling settingsControllerFindOne().',
            )
        }

        const queryParameters: any = {}

        if (requestParameters['populateAll'] != null) {
            queryParameters['populateAll'] = requestParameters['populateAll']
        }

        if (requestParameters['populateItems'] != null) {
            queryParameters['populateItems'] = requestParameters['populateItems']
        }

        if (requestParameters['minimalFields'] != null) {
            queryParameters['minimalFields'] = requestParameters['minimalFields']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/settings/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingFromJSON(jsonValue))
    }

    /**
     * Get one setting
     */
    async settingsControllerFindOne(
        requestParameters: SettingsControllerFindOneRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Setting> {
        const response = await this.settingsControllerFindOneRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get all setting revisions
     */
    async settingsControllerFindRevisionsRaw(
        requestParameters: SettingsControllerFindRevisionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ServicesControllerFindAll200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling settingsControllerFindRevisions().',
            )
        }

        const queryParameters: any = {}

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order']
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page']
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take']
        }

        if (requestParameters['populateAll'] != null) {
            queryParameters['populateAll'] = requestParameters['populateAll']
        }

        if (requestParameters['populateItems'] != null) {
            queryParameters['populateItems'] = requestParameters['populateItems']
        }

        if (requestParameters['withDeleted'] != null) {
            queryParameters['withDeleted'] = requestParameters['withDeleted']
        }

        if (requestParameters['minimalFields'] != null) {
            queryParameters['minimalFields'] = requestParameters['minimalFields']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/settings/{id}/revisions`.replace(
                    `{${'id'}}`,
                    encodeURIComponent(String(requestParameters['id'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ServicesControllerFindAll200ResponseFromJSON(jsonValue),
        )
    }

    /**
     * Get all setting revisions
     */
    async settingsControllerFindRevisions(
        requestParameters: SettingsControllerFindRevisionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ServicesControllerFindAll200Response> {
        const response = await this.settingsControllerFindRevisionsRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get one setting revision
     */
    async settingsControllerGetRevisionRaw(
        requestParameters: SettingsControllerGetRevisionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Setting>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling settingsControllerGetRevision().',
            )
        }

        if (requestParameters['revision'] == null) {
            throw new runtime.RequiredError(
                'revision',
                'Required parameter "revision" was null or undefined when calling settingsControllerGetRevision().',
            )
        }

        const queryParameters: any = {}

        if (requestParameters['populateAll'] != null) {
            queryParameters['populateAll'] = requestParameters['populateAll']
        }

        if (requestParameters['populateItems'] != null) {
            queryParameters['populateItems'] = requestParameters['populateItems']
        }

        if (requestParameters['minimalFields'] != null) {
            queryParameters['minimalFields'] = requestParameters['minimalFields']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/settings/{id}/revisions/{revision}`
                    .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])))
                    .replace(`{${'revision'}}`, encodeURIComponent(String(requestParameters['revision']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingFromJSON(jsonValue))
    }

    /**
     * Get one setting revision
     */
    async settingsControllerGetRevision(
        requestParameters: SettingsControllerGetRevisionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Setting> {
        const response = await this.settingsControllerGetRevisionRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Delete setting
     */
    async settingsControllerRemoveRaw(
        requestParameters: SettingsControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Setting>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling settingsControllerRemove().',
            )
        }

        if (requestParameters['isHardDelete'] == null) {
            throw new runtime.RequiredError(
                'isHardDelete',
                'Required parameter "isHardDelete" was null or undefined when calling settingsControllerRemove().',
            )
        }

        const queryParameters: any = {}

        if (requestParameters['isHardDelete'] != null) {
            queryParameters['isHardDelete'] = requestParameters['isHardDelete']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/settings/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingFromJSON(jsonValue))
    }

    /**
     * Delete setting
     */
    async settingsControllerRemove(
        requestParameters: SettingsControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Setting> {
        const response = await this.settingsControllerRemoveRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Restore setting
     */
    async settingsControllerRestoreRaw(
        requestParameters: SettingsControllerRestoreRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Setting>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling settingsControllerRestore().',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/settings/{id}/restore`.replace(
                    `{${'id'}}`,
                    encodeURIComponent(String(requestParameters['id'])),
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingFromJSON(jsonValue))
    }

    /**
     * Restore setting
     */
    async settingsControllerRestore(
        requestParameters: SettingsControllerRestoreRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Setting> {
        const response = await this.settingsControllerRestoreRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Update setting
     */
    async settingsControllerUpdateRaw(
        requestParameters: SettingsControllerUpdateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Setting>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling settingsControllerUpdate().',
            )
        }

        if (requestParameters['toReplace'] == null) {
            throw new runtime.RequiredError(
                'toReplace',
                'Required parameter "toReplace" was null or undefined when calling settingsControllerUpdate().',
            )
        }

        if (requestParameters['updateSettingDto'] == null) {
            throw new runtime.RequiredError(
                'updateSettingDto',
                'Required parameter "updateSettingDto" was null or undefined when calling settingsControllerUpdate().',
            )
        }

        const queryParameters: any = {}

        if (requestParameters['toReplace'] != null) {
            queryParameters['toReplace'] = requestParameters['toReplace']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        headerParameters['Content-Type'] = 'application/json'

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/settings/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateSettingDtoToJSON(requestParameters['updateSettingDto']),
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingFromJSON(jsonValue))
    }

    /**
     * Update setting
     */
    async settingsControllerUpdate(
        requestParameters: SettingsControllerUpdateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Setting> {
        const response = await this.settingsControllerUpdateRaw(requestParameters, initOverrides)
        return await response.value()
    }
}

/**
 * @export
 */
export const SettingsControllerFindAllOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC',
} as const
export type SettingsControllerFindAllOrderEnum =
    (typeof SettingsControllerFindAllOrderEnum)[keyof typeof SettingsControllerFindAllOrderEnum]
/**
 * @export
 */
export const SettingsControllerFindRevisionsOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC',
} as const
export type SettingsControllerFindRevisionsOrderEnum =
    (typeof SettingsControllerFindRevisionsOrderEnum)[keyof typeof SettingsControllerFindRevisionsOrderEnum]
