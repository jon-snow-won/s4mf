/* tslint:disable */
/* eslint-disable */
/**
 * El Aggregate BFF
 * Бэкенд для федеративного приложения
 *
 * The version of the OpenAPI document: 0.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
    CreateStructureDto,
    DetailedBadRequestException,
    DetailedNotFoundException,
    Structure,
    StructuresControllerFindAll200Response,
    UpdateStructureDto,
} from '../models/index'
import {
    CreateStructureDtoFromJSON,
    CreateStructureDtoToJSON,
    DetailedBadRequestExceptionFromJSON,
    DetailedBadRequestExceptionToJSON,
    DetailedNotFoundExceptionFromJSON,
    DetailedNotFoundExceptionToJSON,
    StructureFromJSON,
    StructureToJSON,
    StructuresControllerFindAll200ResponseFromJSON,
    StructuresControllerFindAll200ResponseToJSON,
    UpdateStructureDtoFromJSON,
    UpdateStructureDtoToJSON,
} from '../models/index'

export interface StructuresControllerCreateRequest {
    createStructureDto: CreateStructureDto
}

export interface StructuresControllerFindAllRequest {
    order?: StructuresControllerFindAllOrderEnum
    page?: number
    take?: number
    populateAll?: boolean
    populateItems?: string
    withDeleted?: boolean
    minimalFields?: boolean
}

export interface StructuresControllerFindOneRequest {
    id: string
    populateAll?: boolean
    populateItems?: string
    minimalFields?: boolean
}

export interface StructuresControllerFindRevisionsRequest {
    id: string
    order?: StructuresControllerFindRevisionsOrderEnum
    page?: number
    take?: number
    populateAll?: boolean
    populateItems?: string
    withDeleted?: boolean
    minimalFields?: boolean
}

export interface StructuresControllerGetRevisionRequest {
    id: string
    revision: string
    populateAll?: boolean
    populateItems?: string
    minimalFields?: boolean
}

export interface StructuresControllerRemoveRequest {
    id: string
    isHardDelete: boolean
}

export interface StructuresControllerRestoreRequest {
    id: string
}

export interface StructuresControllerUpdateRequest {
    id: string
    toReplace: boolean
    updateStructureDto: UpdateStructureDto
}

/**
 *
 */
export class StructuresApi extends runtime.BaseAPI {
    /**
     * Create structure
     */
    async structuresControllerCreateRaw(
        requestParameters: StructuresControllerCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Structure>> {
        if (requestParameters['createStructureDto'] == null) {
            throw new runtime.RequiredError(
                'createStructureDto',
                'Required parameter "createStructureDto" was null or undefined when calling structuresControllerCreate().',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        headerParameters['Content-Type'] = 'application/json'

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/structures`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CreateStructureDtoToJSON(requestParameters['createStructureDto']),
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => StructureFromJSON(jsonValue))
    }

    /**
     * Create structure
     */
    async structuresControllerCreate(
        requestParameters: StructuresControllerCreateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Structure> {
        const response = await this.structuresControllerCreateRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get all structures
     */
    async structuresControllerFindAllRaw(
        requestParameters: StructuresControllerFindAllRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<StructuresControllerFindAll200Response>> {
        const queryParameters: any = {}

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order']
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page']
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take']
        }

        if (requestParameters['populateAll'] != null) {
            queryParameters['populateAll'] = requestParameters['populateAll']
        }

        if (requestParameters['populateItems'] != null) {
            queryParameters['populateItems'] = requestParameters['populateItems']
        }

        if (requestParameters['withDeleted'] != null) {
            queryParameters['withDeleted'] = requestParameters['withDeleted']
        }

        if (requestParameters['minimalFields'] != null) {
            queryParameters['minimalFields'] = requestParameters['minimalFields']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/structures`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            StructuresControllerFindAll200ResponseFromJSON(jsonValue),
        )
    }

    /**
     * Get all structures
     */
    async structuresControllerFindAll(
        requestParameters: StructuresControllerFindAllRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<StructuresControllerFindAll200Response> {
        const response = await this.structuresControllerFindAllRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get single structure
     */
    async structuresControllerFindOneRaw(
        requestParameters: StructuresControllerFindOneRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Structure>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling structuresControllerFindOne().',
            )
        }

        const queryParameters: any = {}

        if (requestParameters['populateAll'] != null) {
            queryParameters['populateAll'] = requestParameters['populateAll']
        }

        if (requestParameters['populateItems'] != null) {
            queryParameters['populateItems'] = requestParameters['populateItems']
        }

        if (requestParameters['minimalFields'] != null) {
            queryParameters['minimalFields'] = requestParameters['minimalFields']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/structures/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => StructureFromJSON(jsonValue))
    }

    /**
     * Get single structure
     */
    async structuresControllerFindOne(
        requestParameters: StructuresControllerFindOneRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Structure> {
        const response = await this.structuresControllerFindOneRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get all structure revisions
     */
    async structuresControllerFindRevisionsRaw(
        requestParameters: StructuresControllerFindRevisionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<StructuresControllerFindAll200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling structuresControllerFindRevisions().',
            )
        }

        const queryParameters: any = {}

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order']
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page']
        }

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take']
        }

        if (requestParameters['populateAll'] != null) {
            queryParameters['populateAll'] = requestParameters['populateAll']
        }

        if (requestParameters['populateItems'] != null) {
            queryParameters['populateItems'] = requestParameters['populateItems']
        }

        if (requestParameters['withDeleted'] != null) {
            queryParameters['withDeleted'] = requestParameters['withDeleted']
        }

        if (requestParameters['minimalFields'] != null) {
            queryParameters['minimalFields'] = requestParameters['minimalFields']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/structures/{id}/revisions`.replace(
                    `{${'id'}}`,
                    encodeURIComponent(String(requestParameters['id'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            StructuresControllerFindAll200ResponseFromJSON(jsonValue),
        )
    }

    /**
     * Get all structure revisions
     */
    async structuresControllerFindRevisions(
        requestParameters: StructuresControllerFindRevisionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<StructuresControllerFindAll200Response> {
        const response = await this.structuresControllerFindRevisionsRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Get one structure revision
     */
    async structuresControllerGetRevisionRaw(
        requestParameters: StructuresControllerGetRevisionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Structure>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling structuresControllerGetRevision().',
            )
        }

        if (requestParameters['revision'] == null) {
            throw new runtime.RequiredError(
                'revision',
                'Required parameter "revision" was null or undefined when calling structuresControllerGetRevision().',
            )
        }

        const queryParameters: any = {}

        if (requestParameters['populateAll'] != null) {
            queryParameters['populateAll'] = requestParameters['populateAll']
        }

        if (requestParameters['populateItems'] != null) {
            queryParameters['populateItems'] = requestParameters['populateItems']
        }

        if (requestParameters['minimalFields'] != null) {
            queryParameters['minimalFields'] = requestParameters['minimalFields']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/structures/{id}/revisions/{revision}`
                    .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])))
                    .replace(`{${'revision'}}`, encodeURIComponent(String(requestParameters['revision']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => StructureFromJSON(jsonValue))
    }

    /**
     * Get one structure revision
     */
    async structuresControllerGetRevision(
        requestParameters: StructuresControllerGetRevisionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Structure> {
        const response = await this.structuresControllerGetRevisionRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Delete structure
     */
    async structuresControllerRemoveRaw(
        requestParameters: StructuresControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Structure>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling structuresControllerRemove().',
            )
        }

        if (requestParameters['isHardDelete'] == null) {
            throw new runtime.RequiredError(
                'isHardDelete',
                'Required parameter "isHardDelete" was null or undefined when calling structuresControllerRemove().',
            )
        }

        const queryParameters: any = {}

        if (requestParameters['isHardDelete'] != null) {
            queryParameters['isHardDelete'] = requestParameters['isHardDelete']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/structures/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => StructureFromJSON(jsonValue))
    }

    /**
     * Delete structure
     */
    async structuresControllerRemove(
        requestParameters: StructuresControllerRemoveRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Structure> {
        const response = await this.structuresControllerRemoveRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Restore structure
     */
    async structuresControllerRestoreRaw(
        requestParameters: StructuresControllerRestoreRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Structure>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling structuresControllerRestore().',
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/structures/{id}/restore`.replace(
                    `{${'id'}}`,
                    encodeURIComponent(String(requestParameters['id'])),
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => StructureFromJSON(jsonValue))
    }

    /**
     * Restore structure
     */
    async structuresControllerRestore(
        requestParameters: StructuresControllerRestoreRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Structure> {
        const response = await this.structuresControllerRestoreRaw(requestParameters, initOverrides)
        return await response.value()
    }

    /**
     * Update structure
     */
    async structuresControllerUpdateRaw(
        requestParameters: StructuresControllerUpdateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Structure>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling structuresControllerUpdate().',
            )
        }

        if (requestParameters['toReplace'] == null) {
            throw new runtime.RequiredError(
                'toReplace',
                'Required parameter "toReplace" was null or undefined when calling structuresControllerUpdate().',
            )
        }

        if (requestParameters['updateStructureDto'] == null) {
            throw new runtime.RequiredError(
                'updateStructureDto',
                'Required parameter "updateStructureDto" was null or undefined when calling structuresControllerUpdate().',
            )
        }

        const queryParameters: any = {}

        if (requestParameters['toReplace'] != null) {
            queryParameters['toReplace'] = requestParameters['toReplace']
        }

        const headerParameters: runtime.HTTPHeaders = {}

        headerParameters['Content-Type'] = 'application/json'

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('bearer', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/structures/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: UpdateStructureDtoToJSON(requestParameters['updateStructureDto']),
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => StructureFromJSON(jsonValue))
    }

    /**
     * Update structure
     */
    async structuresControllerUpdate(
        requestParameters: StructuresControllerUpdateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Structure> {
        const response = await this.structuresControllerUpdateRaw(requestParameters, initOverrides)
        return await response.value()
    }
}

/**
 * @export
 */
export const StructuresControllerFindAllOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC',
} as const
export type StructuresControllerFindAllOrderEnum =
    (typeof StructuresControllerFindAllOrderEnum)[keyof typeof StructuresControllerFindAllOrderEnum]
/**
 * @export
 */
export const StructuresControllerFindRevisionsOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC',
} as const
export type StructuresControllerFindRevisionsOrderEnum =
    (typeof StructuresControllerFindRevisionsOrderEnum)[keyof typeof StructuresControllerFindRevisionsOrderEnum]
