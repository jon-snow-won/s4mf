/* tslint:disable */
/* eslint-disable */
/**
 * El Aggregate BFF
 * Бэкенд для федеративного приложения
 *
 * The version of the OpenAPI document: 0.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type { ServiceType, SettingType } from '../models/index'
import { ServiceTypeFromJSON, ServiceTypeToJSON, SettingTypeFromJSON, SettingTypeToJSON } from '../models/index'

/**
 *
 */
export class TypesApi extends runtime.BaseAPI {
    /**
     * Get all service types
     */
    async typesControllerGetServiceTypesRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<ServiceType>>> {
        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        const response = await this.request(
            {
                path: `/api/types/serviceTypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceTypeFromJSON))
    }

    /**
     * Get all service types
     */
    async typesControllerGetServiceTypes(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<ServiceType>> {
        const response = await this.typesControllerGetServiceTypesRaw(initOverrides)
        return await response.value()
    }

    /**
     * Get all setting types
     */
    async typesControllerGetSettingTypesRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<SettingType>>> {
        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        const response = await this.request(
            {
                path: `/api/types/settingTypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        )

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SettingTypeFromJSON))
    }

    /**
     * Get all setting types
     */
    async typesControllerGetSettingTypes(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<SettingType>> {
        const response = await this.typesControllerGetSettingTypesRaw(initOverrides)
        return await response.value()
    }
}
