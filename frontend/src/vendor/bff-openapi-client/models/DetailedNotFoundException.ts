/* tslint:disable */
/* eslint-disable */
/**
 * El Aggregate BFF
 * Бэкенд для федеративного приложения
 *
 * The version of the OpenAPI document: 0.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { NotFoundError } from './NotFoundError'
import { NotFoundErrorFromJSON, NotFoundErrorFromJSONTyped, NotFoundErrorToJSON } from './NotFoundError'

/**
 *
 * @export
 * @interface DetailedNotFoundException
 */
export interface DetailedNotFoundException {
    /**
     *
     * @type {number}
     * @memberof DetailedNotFoundException
     */
    code: number
    /**
     *
     * @type {string}
     * @memberof DetailedNotFoundException
     */
    message: string
    /**
     *
     * @type {Array<NotFoundError>}
     * @memberof DetailedNotFoundException
     */
    errors: Array<NotFoundError>
}

/**
 * Check if a given object implements the DetailedNotFoundException interface.
 */
export function instanceOfDetailedNotFoundException(value: object): boolean {
    if (!('code' in value)) return false
    if (!('message' in value)) return false
    if (!('errors' in value)) return false
    return true
}

export function DetailedNotFoundExceptionFromJSON(json: any): DetailedNotFoundException {
    return DetailedNotFoundExceptionFromJSONTyped(json, false)
}

export function DetailedNotFoundExceptionFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean,
): DetailedNotFoundException {
    if (json == null) {
        return json
    }
    return {
        code: json['code'],
        message: json['message'],
        errors: (json['errors'] as Array<any>)?.map(NotFoundErrorFromJSON),
    }
}

export function DetailedNotFoundExceptionToJSON(value?: DetailedNotFoundException | null): any {
    if (value == null) {
        return value
    }
    return {
        code: value['code'],
        message: value['message'],
        errors: (value['errors'] as Array<any>)?.map(NotFoundErrorToJSON),
    }
}
