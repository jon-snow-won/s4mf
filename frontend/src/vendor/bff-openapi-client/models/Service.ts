/* tslint:disable */
/* eslint-disable */
/**
 * El Aggregate BFF
 * Бэкенд для федеративного приложения
 *
 * The version of the OpenAPI document: 0.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { Role } from './Role'
import { RoleFromJSON, RoleFromJSONTyped, RoleToJSON } from './Role'
import type { ServiceType } from './ServiceType'
import { ServiceTypeFromJSON, ServiceTypeFromJSONTyped, ServiceTypeToJSON } from './ServiceType'
import type { Setting } from './Setting'
import { SettingFromJSON, SettingFromJSONTyped, SettingToJSON } from './Setting'
import type { User } from './User'
import { UserFromJSON, UserFromJSONTyped, UserToJSON } from './User'

/**
 *
 * @export
 * @interface Service
 */
export interface Service {
    /**
     *
     * @type {Date}
     * @memberof Service
     */
    createdAt?: Date
    /**
     *
     * @type {Date}
     * @memberof Service
     */
    updatedAt?: Date
    /**
     *
     * @type {Array<Role>}
     * @memberof Service
     */
    roles: Array<Role>
    /**
     *
     * @type {Array<Setting>}
     * @memberof Service
     */
    settings: Array<Setting>
    /**
     *
     * @type {Array<Service>}
     * @memberof Service
     */
    descendants: Array<Service>
    /**
     *
     * @type {string}
     * @memberof Service
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof Service
     */
    description: string
    /**
     *
     * @type {ServiceType}
     * @memberof Service
     */
    type: ServiceType
    /**
     *
     * @type {User}
     * @memberof Service
     */
    user: User
    /**
     *
     * @type {string}
     * @memberof Service
     */
    idx?: string
    /**
     *
     * @type {number}
     * @memberof Service
     */
    revision: number
    /**
     *
     * @type {boolean}
     * @memberof Service
     */
    isActive?: boolean
    /**
     *
     * @type {boolean}
     * @memberof Service
     */
    isDeleted?: boolean
    /**
     *
     * @type {Date}
     * @memberof Service
     */
    deletedAt?: Date
    /**
     *
     * @type {number}
     * @memberof Service
     */
    id: number
}

/**
 * Check if a given object implements the Service interface.
 */
export function instanceOfService(value: object): boolean {
    if (!('roles' in value)) return false
    if (!('settings' in value)) return false
    if (!('descendants' in value)) return false
    if (!('name' in value)) return false
    if (!('description' in value)) return false
    if (!('type' in value)) return false
    if (!('user' in value)) return false
    if (!('revision' in value)) return false
    if (!('id' in value)) return false
    return true
}

export function ServiceFromJSON(json: any): Service {
    return ServiceFromJSONTyped(json, false)
}

export function ServiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Service {
    if (json == null) {
        return json
    }
    return {
        createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
        updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
        roles: (json['roles'] as Array<any>)?.map(RoleFromJSON),
        settings: (json['settings'] as Array<any>)?.map(SettingFromJSON),
        descendants: (json['descendants'] as Array<any>)?.map(ServiceFromJSON),
        name: json['name'],
        description: json['description'],
        type: ServiceTypeFromJSON(json['type']),
        user: UserFromJSON(json['user']),
        idx: json['idx'] == null ? undefined : json['idx'],
        revision: json['revision'],
        isActive: json['isActive'] == null ? undefined : json['isActive'],
        isDeleted: json['isDeleted'] == null ? undefined : json['isDeleted'],
        deletedAt: json['deletedAt'] == null ? undefined : new Date(json['deletedAt']),
        id: json['id'],
    }
}

export function ServiceToJSON(value?: Service | null): any {
    if (value == null) {
        return value
    }
    return {
        createdAt: value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
        updatedAt: value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString(),
        roles: (value['roles'] as Array<any>)?.map(RoleToJSON),
        settings: (value['settings'] as Array<any>)?.map(SettingToJSON),
        descendants: (value['descendants'] as Array<any>)?.map(ServiceToJSON),
        name: value['name'],
        description: value['description'],
        type: ServiceTypeToJSON(value['type']),
        user: UserToJSON(value['user']),
        idx: value['idx'],
        revision: value['revision'],
        isActive: value['isActive'],
        isDeleted: value['isDeleted'],
        deletedAt: value['deletedAt'] == null ? undefined : (value['deletedAt'] as any).toISOString(),
        id: value['id'],
    }
}
