/* tslint:disable */
/* eslint-disable */
/**
 * El Aggregate BFF
 * Бэкенд для федеративного приложения
 *
 * The version of the OpenAPI document: 0.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { Service } from './Service'
import { ServiceFromJSON, ServiceFromJSONTyped, ServiceToJSON } from './Service'
import type { Setting } from './Setting'
import { SettingFromJSON, SettingFromJSONTyped, SettingToJSON } from './Setting'
import type { User } from './User'
import { UserFromJSON, UserFromJSONTyped, UserToJSON } from './User'

/**
 *
 * @export
 * @interface Structure
 */
export interface Structure {
    /**
     *
     * @type {Date}
     * @memberof Structure
     */
    createdAt?: Date
    /**
     *
     * @type {Date}
     * @memberof Structure
     */
    updatedAt?: Date
    /**
     *
     * @type {Array<Service>}
     * @memberof Structure
     */
    services: Array<Service>
    /**
     *
     * @type {Array<Setting>}
     * @memberof Structure
     */
    settings: Array<Setting>
    /**
     *
     * @type {string}
     * @memberof Structure
     */
    name: string
    /**
     *
     * @type {string}
     * @memberof Structure
     */
    description: string
    /**
     *
     * @type {User}
     * @memberof Structure
     */
    user: User
    /**
     *
     * @type {string}
     * @memberof Structure
     */
    idx?: string
    /**
     *
     * @type {number}
     * @memberof Structure
     */
    revision: number
    /**
     *
     * @type {boolean}
     * @memberof Structure
     */
    isActive?: boolean
    /**
     *
     * @type {boolean}
     * @memberof Structure
     */
    isDeleted?: boolean
    /**
     *
     * @type {Date}
     * @memberof Structure
     */
    deletedAt?: Date
    /**
     *
     * @type {number}
     * @memberof Structure
     */
    id: number
}

/**
 * Check if a given object implements the Structure interface.
 */
export function instanceOfStructure(value: object): boolean {
    if (!('services' in value)) return false
    if (!('settings' in value)) return false
    if (!('name' in value)) return false
    if (!('description' in value)) return false
    if (!('user' in value)) return false
    if (!('revision' in value)) return false
    if (!('id' in value)) return false
    return true
}

export function StructureFromJSON(json: any): Structure {
    return StructureFromJSONTyped(json, false)
}

export function StructureFromJSONTyped(json: any, ignoreDiscriminator: boolean): Structure {
    if (json == null) {
        return json
    }
    return {
        createdAt: json['createdAt'] == null ? undefined : new Date(json['createdAt']),
        updatedAt: json['updatedAt'] == null ? undefined : new Date(json['updatedAt']),
        services: (json['services'] as Array<any>)?.map(ServiceFromJSON),
        settings: (json['settings'] as Array<any>)?.map(SettingFromJSON),
        name: json['name'],
        description: json['description'],
        user: UserFromJSON(json['user']),
        idx: json['idx'] == null ? undefined : json['idx'],
        revision: json['revision'],
        isActive: json['isActive'] == null ? undefined : json['isActive'],
        isDeleted: json['isDeleted'] == null ? undefined : json['isDeleted'],
        deletedAt: json['deletedAt'] == null ? undefined : new Date(json['deletedAt']),
        id: json['id'],
    }
}

export function StructureToJSON(value?: Structure | null): any {
    if (value == null) {
        return value
    }
    return {
        createdAt: value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
        updatedAt: value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString(),
        services: (value['services'] as Array<any>)?.map(ServiceToJSON),
        settings: (value['settings'] as Array<any>)?.map(SettingToJSON),
        name: value['name'],
        description: value['description'],
        user: UserToJSON(value['user']),
        idx: value['idx'],
        revision: value['revision'],
        isActive: value['isActive'],
        isDeleted: value['isDeleted'],
        deletedAt: value['deletedAt'] == null ? undefined : (value['deletedAt'] as any).toISOString(),
        id: value['id'],
    }
}
